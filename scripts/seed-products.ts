import { PrismaClient } from '@prisma/client'
import fs from 'fs'
import path from 'path'

const prisma = new PrismaClient()

interface ProductData {
  name: string
  description: string
  price: number
  image: string
  category: string
  ingredients: string[]
  isAvailable: boolean
  source?: string
}

async function seedProducts() {
  try {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞–º–∏...')

    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
    const dataPath = path.join(process.cwd(), 'data', 'buy-am-products.json')
    const rawData = fs.readFileSync(dataPath, 'utf-8')
    const products: ProductData[] = JSON.parse(rawData)

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è`)

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã...')
    await prisma.orderItem.deleteMany()
    await prisma.product.deleteMany()

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
    
    for (const productData of products) {
      const product = await prisma.product.create({
        data: {
          name: productData.name,
          description: productData.description,
          price: productData.price,
          image: productData.image,
          category: productData.category,
          ingredients: productData.ingredients,
          isAvailable: productData.isAvailable,
        }
      })
      
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${product.name} (${product.price} ÷è)`)
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalProducts = await prisma.product.count()
    const categories = await prisma.product.groupBy({
      by: ['category'],
      _count: {
        category: true
      }
    })

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    console.log(`–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`)
    console.log('\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:')
    categories.forEach(cat => {
      console.log(`  ${cat.category}: ${cat._count.category} —Ç–æ–≤–∞—Ä–æ–≤`)
    })

    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞–º–∏!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  seedProducts()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error)
      process.exit(1)
    })
}

export default seedProducts
