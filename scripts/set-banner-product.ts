import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function setBannerProduct() {
  try {
    console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–≤–∞—Ä–∞-–±–∞–Ω–Ω–µ—Ä–∞...')

    // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å BANNER —É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    await prisma.product.updateMany({
      where: { status: 'BANNER' },
      data: { status: 'REGULAR' }
    })
    console.log('‚úÖ –£–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å BANNER —É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤')

    // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä "–ü–∏–¥–µ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π" –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å BANNER
    const bannerProduct = await prisma.product.findFirst({
      where: {
        name: {
          contains: '–≥–æ–≤—è–¥–∏–Ω',
          mode: 'insensitive'
        }
      }
    })

    if (bannerProduct) {
      await prisma.product.update({
        where: { id: bannerProduct.id },
        data: { status: 'BANNER' }
      })
      console.log(`‚úÖ –¢–æ–≤–∞—Ä "${bannerProduct.name}" –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–∞–∫ –±–∞–Ω–Ω–µ—Ä`)
    } else {
      console.log('‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É...')
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ–≤–∞—Ä —Å –≥–æ–≤—è–¥–∏–Ω–æ–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–≤–∞—Ä
      const anyProduct = await prisma.product.findFirst({
        where: { isAvailable: true }
      })
      
      if (anyProduct) {
        await prisma.product.update({
          where: { id: anyProduct.id },
          data: { status: 'BANNER' }
        })
        console.log(`‚úÖ –¢–æ–≤–∞—Ä "${anyProduct.name}" –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–∞–∫ –±–∞–Ω–Ω–µ—Ä`)
      } else {
        console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞')
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await prisma.product.groupBy({
      by: ['status'],
      _count: {
        status: true
      }
    })

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:')
    stats.forEach(stat => {
      console.log(`  ${stat.status}: ${stat._count.status} —Ç–æ–≤–∞—Ä–æ–≤`)
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–Ω–Ω–µ—Ä–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

setBannerProduct()
