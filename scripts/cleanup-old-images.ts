import fs from 'fs'
import path from 'path'

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö JPEG —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–º–µ–Ω—ã –Ω–∞ PNG
 * –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ JPEG —Ñ–∞–π–ª—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ PNG —Ñ–∞–π–ª—ã
 */

interface ImageFile {
  jpgPath: string
  pngPath: string
  fileName: string
}

async function cleanupOldImages() {
  try {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö JPEG —Ñ–∞–π–ª–æ–≤...')
    
    const imagesDir = path.join(process.cwd(), 'public', 'images')
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ images
    const files = fs.readdirSync(imagesDir)
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ PNG —Ñ–∞–π–ª—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º -Photoroom
    const pngFiles = files.filter(file => file.endsWith('-Photoroom.png'))
    
    console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ ${pngFiles.length} –Ω–æ–≤—ã—Ö PNG —Ñ–∞–π–ª–æ–≤`)

    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const filesToDelete: ImageFile[] = []
    
    for (const pngFile of pngFiles) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ -Photoroom.png)
      const baseName = pngFile.replace('-Photoroom.png', '')
      const jpgFile = `${baseName}.jpg`
      const jpgPath = path.join(imagesDir, jpgFile)
      const pngPath = path.join(imagesDir, pngFile)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π JPEG —Ñ–∞–π–ª
      if (fs.existsSync(jpgPath)) {
        filesToDelete.push({
          jpgPath,
          pngPath,
          fileName: baseName
        })
      }
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${filesToDelete.length} JPEG —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`)
    filesToDelete.forEach(file => {
      console.log(`  ${file.fileName}.jpg ‚Üí ${file.fileName}-Photoroom.png`)
    })

    if (filesToDelete.length === 0) {
      console.log('‚úÖ –ù–µ—Ç JPEG —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
      return
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ JPEG —Ñ–∞–π–ª—ã:')
    filesToDelete.forEach(file => {
      console.log(`  - ${file.fileName}.jpg`)
    })

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    console.log('\nüóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ JPEG —Ñ–∞–π–ª—ã...')
    
    let deletedCount = 0
    let errorCount = 0

    for (const file of filesToDelete) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PNG —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (fs.existsSync(file.pngPath)) {
          fs.unlinkSync(file.jpgPath)
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${file.fileName}.jpg`)
          deletedCount++
        } else {
          console.log(`‚ö†Ô∏è PNG —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${file.fileName}.jpg`)
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${file.fileName}.jpg:`, error)
        errorCount++
      }
    }

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:')
    console.log(`  –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${deletedCount}`)
    console.log(`  –û—à–∏–±–æ–∫: ${errorCount}`)
    console.log(`  –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${filesToDelete.length}`)

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è JPEG —Ñ–∞–π–ª—ã
    const remainingJpgFiles = files.filter(file => file.endsWith('.jpg'))
    if (remainingJpgFiles.length > 0) {
      console.log('\nüìÅ –û—Å—Ç–∞–≤—à–∏–µ—Å—è JPEG —Ñ–∞–π–ª—ã:')
      remainingJpgFiles.forEach(file => {
        console.log(`  - ${file}`)
      })
    }

    console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error)
    throw error
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  cleanupOldImages()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –æ—á–∏—Å—Ç–∫–∏:', error)
      process.exit(1)
    })
}

export { cleanupOldImages }
