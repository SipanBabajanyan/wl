import { PrismaClient } from '@prisma/client'
import fs from 'fs'
import path from 'path'

const prisma = new PrismaClient()

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç JSON —Ñ–∞–π–ª —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

async function updateJsonData() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏...')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const products = await prisma.product.findMany({
      orderBy: {
        name: 'asc'
      }
    })

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`)

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª–∞
    const jsonData = products.map(product => ({
      name: product.name,
      description: product.description,
      price: product.price,
      image: product.image,
      category: product.category,
      ingredients: product.ingredients,
      isAvailable: product.isAvailable,
      source: "buy.am"
    }))

    // –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
    const jsonFilePath = path.join(process.cwd(), 'data', 'buy-am-products.json')
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    const backupPath = path.join(process.cwd(), 'data', 'buy-am-products-backup.json')
    if (fs.existsSync(jsonFilePath)) {
      fs.copyFileSync(jsonFilePath, backupPath)
      console.log(`üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`)
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    fs.writeFileSync(jsonFilePath, JSON.stringify(jsonData, null, 2), 'utf-8')
    console.log(`‚úÖ JSON —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: ${jsonFilePath}`)

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const categories = jsonData.reduce((acc, product) => {
      acc[product.category] = (acc[product.category] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞:')
    console.log(`  –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${jsonData.length}`)
    console.log('\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:')
    Object.entries(categories).forEach(([category, count]) => {
      console.log(`  ${category}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`)
    })

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    console.log('\nüîç –ü—Ä–∏–º–µ—Ä—ã –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º:')
    const sampleProducts = jsonData.filter(p => p.image.includes('-Photoroom.png')).slice(0, 5)
    sampleProducts.forEach(product => {
      console.log(`  ${product.name}: ${product.image}`)
    })

    console.log('\nüéâ JSON —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  updateJsonData()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error)
      process.exit(1)
    })
}

export { updateJsonData }
