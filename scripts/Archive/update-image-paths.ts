import { PrismaClient } from '@prisma/client'
import fs from 'fs'
import path from 'path'

const prisma = new PrismaClient()

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Å JPEG –Ω–∞ PNG
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ .jpg —Ñ–∞–π–ª—ã –Ω–∞ –Ω–æ–≤—ã–µ .png —Ñ–∞–π–ª—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º -Photoroom
 */

interface ImageMapping {
  oldPath: string
  newPath: string
  fileName: string
}

async function updateImagePaths() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º...')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const products = await prisma.product.findMany({
      select: {
        id: true,
        name: true,
        image: true
      }
    })

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`)

    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –ø—É—Ç–µ–π –Ω–∞ –Ω–æ–≤—ã–µ
    const imageMappings: ImageMapping[] = []
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PNG —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ images
    const imagesDir = path.join(process.cwd(), 'public', 'images')
    const files = fs.readdirSync(imagesDir)
    const pngFiles = files.filter(file => file.endsWith('-Photoroom.png'))
    
    console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ ${pngFiles.length} –Ω–æ–≤—ã—Ö PNG —Ñ–∞–π–ª–æ–≤`)

    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ PNG —Ñ–∞–π–ª–∞
    for (const pngFile of pngFiles) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ -Photoroom.png)
      const baseName = pngFile.replace('-Photoroom.png', '')
      const oldJpgPath = `/images/${baseName}.jpg`
      const newPngPath = `/images/${pngFile}`
      
      imageMappings.push({
        oldPath: oldJpgPath,
        newPath: newPngPath,
        fileName: baseName
      })
    }

    console.log('\nüìã –ú–∞–ø–ø–∏–Ω–≥ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º:')
    imageMappings.forEach(mapping => {
      console.log(`  ${mapping.oldPath} ‚Üí ${mapping.newPath}`)
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let updatedCount = 0
    let skippedCount = 0

    for (const product of products) {
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥
      const mapping = imageMappings.find(m => m.oldPath === product.image)
      
      if (mapping) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–≤—ã–π PNG —Ñ–∞–π–ª
        const newImagePath = path.join(process.cwd(), 'public', mapping.newPath)
        
        if (fs.existsSync(newImagePath)) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          await prisma.product.update({
            where: { id: product.id },
            data: { image: mapping.newPath }
          })
          
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${product.name} (${mapping.oldPath} ‚Üí ${mapping.newPath})`)
          updatedCount++
        } else {
          console.log(`‚ö†Ô∏è PNG —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${mapping.newPath}`)
          skippedCount++
        }
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        if (product.image && product.image.includes('.jpg')) {
          console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è: ${product.name} (${product.image})`)
          skippedCount++
        }
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalProducts = await prisma.product.count()
    const productsWithImages = await prisma.product.count({
      where: {
        image: {
          not: ''
        }
      }
    })

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:')
    console.log(`  –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${totalProducts}`)
    console.log(`  –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`)
    console.log(`  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`)
    console.log(`  –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${productsWithImages}`)

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    console.log('\nüîç –ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:')
    const sampleProducts = await prisma.product.findMany({
      where: {
        image: {
          contains: '-Photoroom.png'
        }
      },
      take: 5,
      select: {
        name: true,
        image: true
      }
    })

    sampleProducts.forEach(product => {
      console.log(`  ${product.name}: ${product.image}`)
    })

    console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  updateImagePaths()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error)
      process.exit(1)
    })
}

export { updateImagePaths }
