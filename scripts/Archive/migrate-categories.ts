import { PrismaClient } from '@prisma/client'
import fs from 'fs'
import path from 'path'

const prisma = new PrismaClient()

interface ProductData {
  name: string
  description: string
  price: number
  image: string
  category: string
  ingredients: string[]
  isAvailable?: boolean
}

async function migrateCategories() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤...')

    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
    const dataPath = path.join(process.cwd(), 'data', 'buy-am-products.json')
    const rawData = fs.readFileSync(dataPath, 'utf-8')
    const products: ProductData[] = JSON.parse(rawData)

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`)

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const uniqueCategories = [...new Set(products.map(p => p.category))]
    console.log(`üìÇ –ù–∞–π–¥–µ–Ω–æ ${uniqueCategories.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`)
    uniqueCategories.forEach(cat => console.log(`  - ${cat}`))

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\nüè∑Ô∏è –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...')
    const categoryMap = new Map()
    
    for (const categoryName of uniqueCategories) {
      const category = await prisma.category.create({
        data: {
          name: categoryName,
          description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryName}`,
          isActive: true
        }
      })
      categoryMap.set(categoryName, category.id)
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}`)
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    console.log('\nüì¶ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã...')
    
    for (const productData of products) {
      const product = await prisma.product.create({
        data: {
          name: productData.name,
          description: productData.description,
          price: productData.price,
          image: productData.image,
          categoryId: categoryMap.get(productData.category),
          ingredients: productData.ingredients,
          isAvailable: productData.isAvailable ?? true,
        }
      })
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: ${product.name} (${product.price} ÷è) - ${productData.category}`)
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalProducts = await prisma.product.count()
    const totalCategories = await prisma.category.count()
    const categoriesWithCounts = await prisma.category.findMany({
      include: {
        _count: {
          select: { products: true }
        }
      }
    })

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    console.log(`–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${totalCategories}`)
    console.log(`–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`)
    console.log('\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:')
    categoriesWithCounts.forEach(cat => {
      console.log(`  ${cat.name}: ${cat._count.products} —Ç–æ–≤–∞—Ä–æ–≤`)
    })

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

migrateCategories()
